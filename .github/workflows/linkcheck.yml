name: Lychee check
on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: "5 0 1 * *" # In UTC, currently 12:05 AM on the 1st of each month

jobs:
  linkChecker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # check URLs with Lychee
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version

      - name: Ensure lychee output dir
        run: mkdir -p lychee

      - name: Determine base URL
        id: base-url
        run: |
          # Default to production URL
          BASE_URL="https://docs.wandb.ai"
          
          # If we're on a PR branch, try to use Cloudflare preview URL
          if [[ "${{ github.event_name }}" == "pull_request" ]] || [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            # Extract branch name
            BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
            
            # Convert branch name to Cloudflare format:
            # 1. Take first 28 chars of branch name (Cloudflare limit)
            # 2. Convert to lowercase
            # 3. Replace non-alphanumeric chars with hyphens
            # 4. Remove leading/trailing hyphens
            # 5. Collapse multiple hyphens
            PREVIEW_BRANCH=$(echo "$BRANCH_NAME" | \
              cut -c1-28 | \
              tr '[:upper:]' '[:lower:]' | \
              sed 's/[^a-z0-9]/-/g' | \
              sed 's/^-*//' | \
              sed 's/-*$//' | \
              sed 's/--*/-/g')
            
            # Cloudflare branch preview URL format
            PREVIEW_URL="https://${PREVIEW_BRANCH}.docodile.pages.dev"
            
            echo "Branch name: $BRANCH_NAME"
            echo "Preview branch slug: $PREVIEW_BRANCH"
            echo "Testing preview URL: $PREVIEW_URL"
            
            # Test if preview URL is accessible (with retries for new PRs)
            for i in {1..3}; do
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$PREVIEW_URL" || echo "000")
              if [[ "$HTTP_CODE" =~ ^(200|301|302|304)$ ]]; then
                BASE_URL="$PREVIEW_URL"
                echo "✓ Using Cloudflare branch preview URL: $BASE_URL"
                break
              else
                echo "Attempt $i: Preview returned $HTTP_CODE"
                if [[ $i -lt 3 ]]; then
                  echo "Waiting 5 seconds before retry..."
                  sleep 5
                fi
              fi
            done
            
            if [[ "$BASE_URL" == "https://docs.wandb.ai" ]]; then
              echo "⚠️ Cloudflare preview not accessible after retries, using production URL"
            fi
          else
            echo "Running on main branch, using production URL"
          fi
          
          echo "base_url=$BASE_URL" >> $GITHUB_OUTPUT

      - name: Link Checker
        id: lychee
        uses: lycheeverse/lychee-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: "--accept 200,429,403 --user-agent 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' --scheme https --scheme http --max-concurrency 5 --max-retries 1 --retry-wait-time 2 --verbose --no-progress --require-https --base-url '${{ steps.base-url.outputs.base_url }}' 'content/**/*.md' 'content/**/*.html' 'https://docs.wandb.ai/guides/' 'https://docs.wandb.ai/ref/' 'https://docs.wandb.ai/tutorials/' 'https://docs.wandb.ai/support/'"
          output: ./lychee/out.json
          format: json
          fail: false
        env:
          # to be used in case rate limits are surpassed
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Apply auto-fixes and generate report
        id: fix
        run: |
          set -euo pipefail
          node .github/scripts/fix_broken_links.mjs || true
          
          # Check if there are any changes to commit
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if report exists
          if [[ -f .github/lychee-report.md ]]; then
            echo "has_report=true" >> $GITHUB_OUTPUT
          else
            echo "has_report=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request with fixes
        id: cpr
        if: steps.fix.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "docs: fix broken links (automated)"
          title: "docs: fix broken links (automated)"
          body: |
            This PR was created automatically from the scheduled link check.

            - Auto-fixed redirectable links where possible
            - Generated a report with any remaining links requiring manual review at `.github/lychee-report.md`

            Please review the comments and report for follow-up.
          branch: chore/fix-broken-links-${{ github.run_id }}
          delete-branch: true

      - name: Comment manual follow-ups on PR
        if: steps.cpr.outputs.pull-request-operation == 'created' || steps.cpr.outputs.pull-request-operation == 'updated'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.github/lychee-report.md';
            let body = '';
            if (fs.existsSync(path)) {
              const md = fs.readFileSync(path, 'utf8');
              const section = md.split('\n').slice(0, 400).join('\n');
              body = `Broken links requiring manual follow-up (truncated if long):\n\n${section}`;
            } else {
              body = 'No manual follow-ups detected.';
            }
            const prNumber = Number('${{ steps.cpr.outputs.pull-request-number || 0 }}');
            if (prNumber > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body,
              });
            }

      - name: Create issue for manual fixes if no PR created
        if: steps.fix.outputs.has_changes == 'false' && steps.fix.outputs.has_report == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = '.github/lychee-report.md';
            
            let reportContent = 'No report found.';
            if (fs.existsSync(reportPath)) {
              reportContent = fs.readFileSync(reportPath, 'utf8');
            }
            
            // Check if report contains manual follow-ups
            if (reportContent.includes('Manual follow-up needed')) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Link Check Report: Manual fixes needed (Run #${context.runId})`,
                body: `The automated link checker found broken links that require manual intervention.\n\n${reportContent}`,
                labels: ['documentation', 'maintenance']
              });
              
              console.log(`Created issue #${issue.data.number} for manual link fixes`);
            } else {
              console.log('No manual fixes needed, skipping issue creation');
            }

      - name: Summary
        if: always()
        run: |
          echo "## Link Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "🔗 **Base URL:** ${{ steps.base-url.outputs.base_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.fix.outputs.has_changes }}" == "true" ]]; then
            echo "✅ Created PR #${{ steps.cpr.outputs.pull-request-number }} with auto-fixed links" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.fix.outputs.has_report }}" == "true" ]]; then
            echo "📋 No auto-fixable changes, but manual fixes are needed (see issue created)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✨ No broken links found!" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ -f .github/lychee-report.md ]]; then
            echo "### Report Preview" >> $GITHUB_STEP_SUMMARY
            head -20 .github/lychee-report.md >> $GITHUB_STEP_SUMMARY
          fi
