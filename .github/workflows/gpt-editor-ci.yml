name: GPT Editor (CI version)

on:
    issue_comment:
      types: [created]

jobs:
    improve-docs:
        runs-on: ubuntu-latest
        # Only run on PR comments containing "gpt editor" (case insensitive)
        if: |
            github.event.issue.pull_request &&
            contains(github.event.comment.body, 'gpt editor') || 
            contains(github.event.comment.body, 'GPT Editor') || 
            contains(github.event.comment.body, 'GPT editor') || 
            contains(github.event.comment.body, 'gpt Editor')
        permissions:
            contents: read
            pull-requests: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                fetch-depth: 0  # Need full history to access PR changes
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: '3.10'
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install openai weave
            - name: Checkout PR
              run: |
                PR_URL="${{ github.event.issue.pull_request.url }}"
                PR_NUMBER="${{ github.event.issue.number }}"
                echo "Checking out PR #$PR_NUMBER"
                gh pr checkout $PR_NUMBER
                env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Get changed markdown files
              id: changed-files
              uses: tj-actions/changed-files@v35
              with:
              files: '**/*.md'
            - name: Install GitHub CLI
              run: |
                curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
                sudo apt update
                sudo apt install gh
            - name: Process files with GPT and create suggestions
              if: steps.changed-files.outputs.any_changed == 'true'
              env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              PR_NUMBER: ${{ github.event.issue.number }}
              run: |
                # Create a Python script to process the markdown files
                cat > gpt_suggestions.py << 'EOF'
                import os
                import sys
                import subprocess
                import difflib
                import tempfile
                
                def process_file(file_path):
                    """Process a markdown file with GPT editor and create suggestions for improvements"""
                    print(f"Processing {file_path}")
                    
                    # Get the lines modified in the PR using git diff
                    try:
                        # Find base branch reference to diff against
                        base_ref_result = subprocess.run(
                            ['git', 'merge-base', 'HEAD', 'origin/main'], 
                            capture_output=True, text=True, check=False
                        )
                        if base_ref_result.returncode != 0:
                            # Try with master if main doesn't exist
                            base_ref_result = subprocess.run(
                                ['git', 'merge-base', 'HEAD', 'origin/master'], 
                                capture_output=True, text=True, check=True
                            )
                        
                        base_ref = base_ref_result.stdout.strip()
                        
                        # Get line numbers added/modified in the PR
                        diff_result = subprocess.run(
                            ['git', 'diff', '--unified=0', base_ref, '--', file_path],
                            capture_output=True, text=True, check=True
                        )
                        
                        # Parse the diff to get line numbers
                        modified_line_ranges = []
                        for line in diff_result.stdout.splitlines():
                            # Look for lines like @@ -71,0 +72,3 @@ which show line changes
                            if line.startswith('@@'):
                                parts = line.split(' ')
                                if len(parts) >= 3:
                                    # Parse the +A,B part to get the line range in the current version
                                    # where A is the starting line and B is the number of lines
                                    added_part = parts[2]
                                    if added_part.startswith('+'):
                                        range_part = added_part[1:].split(',')
                                        start_line = int(range_part[0])
                                        num_lines = 1 if len(range_part) == 1 else int(range_part[1])
                                        if num_lines > 0:
                                            modified_line_ranges.append((start_line, start_line + num_lines - 1))
                        
                        print(f"Modified line ranges in PR: {modified_line_ranges}")
                    except subprocess.CalledProcessError as e:
                        print(f"Error getting modified lines: {e}")
                        modified_line_ranges = []
                    
                    # Save original content (the PR version)
                    with open(file_path, 'r') as f:
                        original_content = f.read()
                        original_lines = original_content.splitlines()
                    
                    # Run gpt-editor.py to get improved content
                    try:
                        subprocess.run(['python', 'scripts/gpt-editor.py', file_path], check=True)
                        print(f"Successfully ran GPT editor on {file_path}")
                    except subprocess.CalledProcessError as e:
                        print(f"Error running GPT editor: {e}")
                        return
                    
                    # Read the improved content
                    with open(file_path, 'r') as f:
                        improved_content = f.read()
                        improved_lines = improved_content.splitlines()
                    
                    # Restore the original content (so PR doesn't get modified)
                    with open(file_path, 'w') as f:
                        f.write(original_content)
                    
                    # If no changes were made, exit
                    if original_content == improved_content:
                        print(f"No improvements made to {file_path}")
                        return
                    
                    # Find changed sections using sequence matcher
                    matcher = difflib.SequenceMatcher(None, original_lines, improved_lines)
                    
                    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
                        # Only process changes (not matches)
                        if tag in ('replace', 'delete', 'insert'):
                            # Get the original and improved sections
                            original_section = original_lines[i1:i2]
                            improved_section = improved_lines[j1:j2]
                            
                            # Check if this change overlaps with modified lines in the PR
                            # Line numbers are 1-based in GitHub but 0-based in the list
                            line_start = i1 + 1  # Convert to 1-based
                            line_end = i2  # i2 is exclusive in Python, but we need inclusive for line ranges
                            
                            # Only create suggestions for sections that overlap with PR changes
                            if modified_line_ranges and any(
                                max(range_start, line_start) <= min(range_end, line_end)
                                for range_start, range_end in modified_line_ranges
                            ):
                                create_suggestion(file_path, line_start, line_end, original_section, improved_section)
                            else:
                                print(f"Skipping suggestion for {file_path} lines {line_start}-{line_end} as they weren't modified in the PR")
                
                def create_suggestion(file_path, start_line, end_line, original_section, improved_section):
                    """Create a GitHub PR comment with a suggestion"""
                    # Format the comment text
                    comment = (
                        f"GPT suggests improving lines {start_line}-{end_line} in `{file_path}`:\n\n"
                        "```suggestion\n"
                        f"{chr(10).join(improved_section)}\n"
                        "```\n\n"
                        "*This suggestion was automatically generated by GPT-editor.*"
                    )
                    
                    # Write to a temporary file
                    with tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp:
                        tmp.write(comment)
                        tmp_path = tmp.name
                    
                    # Use GitHub CLI to create the PR comment
                    pr_number = os.environ.get('PR_NUMBER')
                    subprocess.run([
                        'gh', 'pr', 'comment', pr_number,
                        '--body-file', tmp_path
                    ], check=True)
                    
                    # Clean up
                    os.unlink(tmp_path)
                    print(f"Created suggestion for {file_path} lines {start_line}-{end_line}")
                
                # Process all files passed on the command line
                if __name__ == "__main__":
                    for file_path in sys.argv[1:]:
                        if file_path.endswith('.md'):
                            process_file(file_path)
                EOF
                
                # Authenticate with GitHub CLI
                echo "$GITHUB_TOKEN" | gh auth login --with-token
                
                # Run the script on all changed markdown files
                python gpt_suggestions.py ${{ steps.changed-files.outputs.all_changed_files }}
            - name: Comment if no markdown files were changed
              if: steps.changed-files.outputs.any_changed != 'true'
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                PR_NUMBER: ${{ github.event.issue.number }}
              run: |
                gh pr comment $PR_NUMBER --body "No markdown files were changed in this PR, so the GPT editor has nothing to process."