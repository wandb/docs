name: MDX Lint

# Run on pull requests that modify MDX files
on:
  pull_request:
    paths:
      - '**.mdx'
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write  # Need write permission to post comments

jobs:
  lint-mdx:
    name: Validate MDX Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch the base branch to compare changes
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # No cache since package-lock.json is gitignored
      
      - name: Install dependencies
        run: |
          # Install MDX compiler and dependencies
          npm install --no-save @mdx-js/mdx glob
      
      - name: Get changed MDX files
        id: changed-files
        run: |
          # Get list of changed MDX files between base and head
          echo "Identifying changed MDX files..."
          
          # Make the script executable
          chmod +x scripts/get-changed-mdx-files.sh
          
          # Get changed files
          CHANGED_FILES=$(./scripts/get-changed-mdx-files.sh "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No MDX files changed in this PR"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed MDX files:"
            echo "$CHANGED_FILES"
            
            # Convert newlines to spaces for passing to the validation script
            CHANGED_FILES_SPACE=$(echo "$CHANGED_FILES" | tr '\n' ' ')
            echo "files=$CHANGED_FILES_SPACE" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate changed MDX files
        id: validate
        if: steps.changed-files.outputs.has_changes == 'true'
        run: |
          echo "Validating MDX files for parsing errors..."
          
          # Run validation and capture output
          set -o pipefail  # Ensure pipe returns the exit code of the first failing command
          
          if node scripts/validate-mdx.js --ci ${{ steps.changed-files.outputs.files }} 2>&1 | tee validation-output.txt; then
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            echo "✅ All MDX files validated successfully!"
          else
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            # Extract error details for the comment
            ERROR_OUTPUT=$(cat validation-output.txt)
            # Escape special characters for GitHub output
            ERROR_OUTPUT="${ERROR_OUTPUT//'%'/'%25'}"
            ERROR_OUTPUT="${ERROR_OUTPUT//$'\n'/'%0A'}"
            ERROR_OUTPUT="${ERROR_OUTPUT//$'\r'/'%0D'}"
            echo "error_details=$ERROR_OUTPUT" >> $GITHUB_OUTPUT
            
            # Don't exit here - let the comment be posted first
            echo "❌ MDX validation failed. See details in PR comment."
          fi
      
      - name: Debug validation output
        if: always() && steps.changed-files.outputs.has_changes == 'true'
        run: |
          echo "Validation passed: ${{ steps.validate.outputs.validation_passed }}"
          echo "Has error details: ${{ steps.validate.outputs.error_details != '' }}"
          echo "Changed files detected: ${{ steps.changed-files.outputs.has_changes }}"
      
      - name: Manage PR comment
        if: always() && steps.changed-files.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const botCommentIdentifier = '<!-- mdx-lint-bot -->';
              
              console.log('Starting comment management...');
              console.log('Context:', { 
                owner: context.repo.owner, 
                repo: context.repo.repo, 
                issue: context.issue.number 
              });
              
              // Find existing bot comments
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              console.log(`Found ${comments.length} total comments`);
              
              const botComments = comments.filter(comment => 
                comment.body.includes(botCommentIdentifier) && 
                comment.user.type === 'Bot'
              );
              
              console.log(`Found ${botComments.length} bot comments`);
            
            if ('${{ steps.validate.outputs.validation_passed }}' === 'false') {
              // Validation failed - post or update error comment
              const errorDetails = `${{ steps.validate.outputs.error_details }}`;
              
              // Parse the error output to extract file names and errors
              const lines = errorDetails.split('%0A');
              let errorSummary = [];
              let currentFile = null;
              
              for (const line of lines) {
                // Check if line contains a file path with an error marker
                if (line.includes('✗') || line.includes('✓')) {
                  const match = line.match(/[✗✓]\s+(.+\.mdx)/);
                  if (match) {
                    currentFile = match[1];
                  }
                }
                // Check if line contains an error message
                if (line.includes('Error:') && currentFile) {
                  const errorMsg = line.replace(/.*Error:\s*/, '').trim();
                  errorSummary.push(`- **${currentFile}**: ${errorMsg}`);
                }
              }
              
              const errorList = errorSummary.length > 0 
                ? '### Files with errors:\n\n' + errorSummary.join('\n')
                : 'Check the workflow logs for detailed error information.';
              
              const comment = `${botCommentIdentifier}
            ## ❌ MDX Validation Failed
            
            One or more MDX files in this PR contain parsing errors.
            
            ${errorList}
            
            ### Common causes of MDX parsing errors:
            - Missing closing tags (e.g., \`<Frame\` instead of \`<Frame>\`)
            - Unclosed JSX components
            - Invalid JSX syntax in MDX content
            - Malformed frontmatter
            
            ### To test locally:
            \`\`\`bash
            npm run validate:mdx ${errorSummary.map(e => e.match(/\*\*(.+?)\*\*/)?.[1] || '').filter(f => f).join(' ')}
            \`\`\`
            `;
              
              if (botComments.length > 0) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComments[0].id,
                  body: comment
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } else {
              // Validation passed - remove error comments and optionally post success
              if (botComments.length > 0) {
                // Delete all bot comments
                for (const comment of botComments) {
                  await github.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id
                  });
                }
                
                // Post a success comment (optional - can be removed if you prefer silent success)
                const successComment = `${botCommentIdentifier}
            ## ✅ MDX Validation Passed
            
            All MDX files in this PR are valid and ready for review.`;
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: successComment
                });
              }
            }
            } catch (error) {
              console.error('Error managing PR comment:', error);
              // Don't fail the job if comment posting fails
              console.log('Comment posting failed but continuing...');
            }
      
      - name: Check validation result
        if: steps.changed-files.outputs.has_changes == 'true'
        run: |
          if [ "${{ steps.validate.outputs.validation_passed }}" = "false" ]; then
            echo "❌ Failing job due to MDX validation errors"
            exit 1
          else
            echo "✅ All MDX files validated successfully!"
          fi
